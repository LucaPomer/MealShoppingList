{"version":3,"sources":["MealCardList.js","GroceriesList.js","MainBody.js","App.js","serviceWorker.js","index.js"],"names":["MealCardList","index","handleClickMeal","props","mealName","this","mealsList","name","className","createMeal","React","Component","Meal","Card","bg","Img","variant","src","Body","Title","Text","Button","onClick","Product","Container","fluid","Row","Col","xs","id","ListGroupItem","amount","clickRemoveProduct","clickAddProduct","GroceriesList","state","productToAmount","listItems","window","listComponent","names","mapCopy","hasOwnProperty","toString","setState","parseInt","listOfProducts","listWithDuplicatesCopy","keys","Object","key","push","removeProductAmount","addProductAmount","MainBody","mealsJSON","require","productList","groceries","ingredients","addProduct","i","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0529579.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Card from \"react-bootstrap/Card\";\n\nclass MealCardList extends React.Component {\n\n    createMeal(index) {\n        return (\n            <Meal\n                handleClickMeal={() => this.props.handleClickMeal(index)}\n                mealName={this.props.mealsList[index].name}\n            />\n        );\n    }\n\n\n    render() {\n\n        return (\n            <div className=\"mealCard\">\n                <h1>Meal Card</h1>\n                <ul>\n                    {this.createMeal(0)}\n                    {this.createMeal(1)}\n                    {this.createMeal(1)}\n                </ul>\n\n            </div>\n        );\n    }\n\n\n}\n\nclass Meal extends React.Component {\n\n    render() {\n        return <Card bg= \"light\" className=\"mealButton\">\n            <Card.Img variant=\"top\" src=\"img/defaultImage.jpg\"/>\n            <Card.Body>\n                <Card.Title>{this.props.mealName}</Card.Title>\n                <Card.Text>\n                    a nice meal\n                </Card.Text>\n                <Button onClick={this.props.handleClickMeal} variant=\"primary\">Add to Groceries</Button>\n            </Card.Body>\n        </Card>;\n    }\n}\n\nexport default MealCardList","import React from 'react';\nimport Button from 'react-bootstrap/Button'\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nclass GroceriesList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            productToAmount: props.listItems,\n        }\n        window.listComponent = this;\n    }\n\n    addProduct(names) {\n        let mapCopy = this.state.productToAmount;\n        for (let name of names) {\n            let amount;\n            if (mapCopy.hasOwnProperty(name)) {\n                amount = mapCopy[name.toString()];\n                amount++;\n            } else {\n                amount = 1;\n            }\n            mapCopy[name.toString()] = amount;\n        }\n\n        this.setState({\n            productToAmount: mapCopy,\n        });\n    }\n\n    removeProductAmount(name) {\n        let mapCopy = this.state.productToAmount;\n        let amount;\n        if (mapCopy.hasOwnProperty(name)) {\n            amount = parseInt(mapCopy[name.toString()]);\n            if(amount<=1){\n                delete mapCopy[name.toString()];\n            }\n            else{\n                amount--;\n                mapCopy[name.toString()] = amount;\n            }\n        }\n        this.setState({\n            productToAmount: mapCopy,\n        });\n    }\n\n    addProductAmount(name) {\n        let mapCopy = this.state.productToAmount;\n        let amount;\n        if (mapCopy.hasOwnProperty(name)) {\n            amount = parseInt(mapCopy[name.toString()]);\n                amount++;\n                mapCopy[name.toString()] = amount;\n        }\n        this.setState({\n            productToAmount: mapCopy,\n        });\n    }\n\n    render() {\n        const listOfProducts = [];\n        const listWithDuplicatesCopy = this.state.productToAmount;\n        let keys = Object.keys(listWithDuplicatesCopy);\n        for (let key of keys) {\n            listOfProducts.push(<Product\n                clickRemoveProduct={() => this.removeProductAmount(key)}\n                clickAddProduct={() => this.addProductAmount(key)}\n                key={key}\n                name={key}\n                amount={listWithDuplicatesCopy[key]}/>)\n        }\n        return (\n            <div className={\"groceryList\"}>\n                <h1>Grocery List</h1>\n                <li id={\"productList\"}>\n                    {listOfProducts}\n                </li>\n            </div>\n        )\n    }\n\n}\n\nfunction Product(props) {\n    return <Container fluid=\"md\">\n        <Row className={\"productItem\"}>\n            <Col xs id={\"description\"}>\n                <ListGroupItem variant={\"secondary\"}>{props.amount} x {props.name}</ListGroupItem>\n            </Col>\n            <Col id={\"removeButton\"} xs={\"auto\"}>\n                <Button variant={\"danger\"} onClick={props.clickRemoveProduct}>-</Button>\n            </Col>\n            <Col id={\"addButton\"} xs={\"auto\"}>\n                <Button variant={\"success\"} onClick={props.clickAddProduct}>+</Button>\n            </Col>\n        </Row>\n    </Container>\n\n    //<ListGroup.Item variant=\"secondary\" key={props.name}>{props.amount} x {props.name}  </ListGroup.Item>\n\n\n}\n\n\nexport default GroceriesList;","import React from 'react';\nimport MealCardList from \"./MealCardList\";\nimport GroceriesList from \"./GroceriesList\";\n\nclass MainBody extends React.Component {\n    constructor(props){\n        super(props);\n        const mealsJSON = require('./availableMeals.json');\n        this.state = {\n            mealsList: mealsJSON.mealsList,\n            productList: {}\n        }\n    }\n\n\n    handleClickMeal(index) {\n        const meals = this.state.mealsList;\n        let groceries = meals[index].ingredients;\n        window.listComponent.addProduct(groceries);\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <MealCardList\n                    handleClickMeal = {(i)=>this.handleClickMeal(i)}\n                    mealsList = {this.state.mealsList}/>\n                <GroceriesList listItems = {this.state.productList}/>\n            </div>\n        );\n    }\n\n\n}\nexport default MainBody","import React from 'react';\nimport './App.css';\nimport MainBody from \"./MainBody\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainBody></MainBody>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}